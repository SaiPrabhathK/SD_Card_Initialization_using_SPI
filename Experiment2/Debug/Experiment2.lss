
Experiment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000010b6  0000114a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025f  0080013a  0080013a  00001184  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023a2  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  0000370a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f46  00000000  00000000  000048b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000057f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087c  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000102b  00000000  00000000  000063cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000073f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      58:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      5c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      60:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      64:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      68:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      6c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      70:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      74:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      78:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      7c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      80:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      84:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      88:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      8c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      90:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      94:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      98:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      9c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      a0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      a4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      a8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      ac:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      b0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      b4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      b8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      bc:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      c0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      c4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      c8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>

000000cc <Prnt_bytes_prnt>:
      cc:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
      dc:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
      ec:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
      fc:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf ef       	ldi	r28, 0xFF	; 255
     112:	d8 e0       	ldi	r29, 0x08	; 8
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
     118:	11 e0       	ldi	r17, 0x01	; 1
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	e6 eb       	ldi	r30, 0xB6	; 182
     120:	f0 e1       	ldi	r31, 0x10	; 16
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x10>
     124:	05 90       	lpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	aa 33       	cpi	r26, 0x3A	; 58
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0xc>

0000012e <__do_clear_bss>:
     12e:	23 e0       	ldi	r18, 0x03	; 3
     130:	aa e3       	ldi	r26, 0x3A	; 58
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a9 39       	cpi	r26, 0x99	; 153
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	0e 94 45 01 	call	0x28a	; 0x28a <main>
     142:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <GPIO_Output_Init>:
#include "GPIO_Outputs.h"

void GPIO_Output_Init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
     14a:	fc 01       	movw	r30, r24
     14c:	21 81       	ldd	r18, Z+1	; 0x01
     14e:	62 2b       	or	r22, r18
     150:	61 83       	std	Z+1, r22	; 0x01
     152:	08 95       	ret

00000154 <GPIO_Output_Set>:


void GPIO_Output_Set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on 
		(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
     154:	fc 01       	movw	r30, r24
     156:	22 81       	ldd	r18, Z+2	; 0x02
     158:	62 2b       	or	r22, r18
     15a:	62 83       	std	Z+2, r22	; 0x02
     15c:	08 95       	ret

0000015e <GPIO_Output_Clear>:
}

void GPIO_Output_Clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
     15e:	fc 01       	movw	r30, r24
	//control = 0, LED off; control = 1, LED on
		(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
     160:	92 81       	ldd	r25, Z+2	; 0x02
     162:	60 95       	com	r22
     164:	69 23       	and	r22, r25
     166:	62 83       	std	Z+2, r22	; 0x02
     168:	08 95       	ret

0000016a <Long_Serial_Input>:
RETURNS: unsigned long
CAUTION: UART must be initialized first
************************************************************************/

uint32_t Long_Serial_Input(volatile UART_t * UART_addr)
{
     16a:	8f 92       	push	r8
     16c:	9f 92       	push	r9
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	2b 97       	sbiw	r28, 0x0b	; 11
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	7c 01       	movw	r14, r24
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	08 c0       	rjmp	.+16     	; 0x1a4 <Long_Serial_Input+0x3a>
      {
        input_values[index]=0;
     194:	e1 e0       	ldi	r30, 0x01	; 1
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	ec 0f       	add	r30, r28
     19a:	fd 1f       	adc	r31, r29
     19c:	e8 0f       	add	r30, r24
     19e:	f1 1d       	adc	r31, r1
     1a0:	10 82       	st	Z, r1
uint32_t Long_Serial_Input(volatile UART_t * UART_addr)
{
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     1a2:	8f 5f       	subi	r24, 0xFF	; 255
     1a4:	8b 30       	cpi	r24, 0x0B	; 11
     1a6:	b0 f3       	brcs	.-20     	; 0x194 <Long_Serial_Input+0x2a>
     1a8:	88 24       	eor	r8, r8
     1aa:	8a 94       	dec	r8
     1ac:	98 2c       	mov	r9, r8
     1ae:	54 01       	movw	r10, r8
     1b0:	00 e0       	ldi	r16, 0x00	; 0
      }
      output_value=0xffffffff;
      index=0;
      do
      {
         input=UART_Receive(UART_addr);
     1b2:	c7 01       	movw	r24, r14
     1b4:	0e 94 b1 04 	call	0x962	; 0x962 <UART_Receive>
     1b8:	18 2f       	mov	r17, r24
         if((input>=0x30)&&(input<=0x39))
     1ba:	80 ed       	ldi	r24, 0xD0	; 208
     1bc:	81 0f       	add	r24, r17
     1be:	8a 30       	cpi	r24, 0x0A	; 10
     1c0:	68 f4       	brcc	.+26     	; 0x1dc <Long_Serial_Input+0x72>
         {
           UART_Transmit(UART_addr,input);    // echo valid inputs only
     1c2:	61 2f       	mov	r22, r17
     1c4:	c7 01       	movw	r24, r14
     1c6:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
		   input_values[index]=input;
     1ca:	e1 e0       	ldi	r30, 0x01	; 1
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	ec 0f       	add	r30, r28
     1d0:	fd 1f       	adc	r31, r29
     1d2:	e0 0f       	add	r30, r16
     1d4:	f1 1d       	adc	r31, r1
     1d6:	10 83       	st	Z, r17
           index++;
     1d8:	0f 5f       	subi	r16, 0xFF	; 255
     1da:	2d c0       	rjmp	.+90     	; 0x236 <Long_Serial_Input+0xcc>
         }
         else if ((input==BS)||(input==DEL))  // Putty uses DEL (127) or BS (0x08) for backspace
     1dc:	18 30       	cpi	r17, 0x08	; 8
     1de:	11 f0       	breq	.+4      	; 0x1e4 <Long_Serial_Input+0x7a>
     1e0:	1f 37       	cpi	r17, 0x7F	; 127
     1e2:	a9 f4       	brne	.+42     	; 0x20e <Long_Serial_Input+0xa4>
         {
           index--;
     1e4:	01 50       	subi	r16, 0x01	; 1
           input_values[index]=0;
     1e6:	e1 e0       	ldi	r30, 0x01	; 1
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ec 0f       	add	r30, r28
     1ec:	fd 1f       	adc	r31, r29
     1ee:	e0 0f       	add	r30, r16
     1f0:	f1 1d       	adc	r31, r1
     1f2:	10 82       	st	Z, r1
		   UART_Transmit(UART_addr,BS);
     1f4:	68 e0       	ldi	r22, 0x08	; 8
     1f6:	c7 01       	movw	r24, r14
     1f8:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
           UART_Transmit(UART_addr,space);
     1fc:	60 e2       	ldi	r22, 0x20	; 32
     1fe:	c7 01       	movw	r24, r14
     200:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
           UART_Transmit(UART_addr,BS);
     204:	68 e0       	ldi	r22, 0x08	; 8
     206:	c7 01       	movw	r24, r14
     208:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
     20c:	14 c0       	rjmp	.+40     	; 0x236 <Long_Serial_Input+0xcc>
         }
		 //*** Added '.' as a replacement for ENTER since CR or LF does not work for Atmel Studio Data Visualizer ****//
         else if ((input==CR)||(input==LF)||(input=='.'))
     20e:	1d 30       	cpi	r17, 0x0D	; 13
     210:	21 f0       	breq	.+8      	; 0x21a <Long_Serial_Input+0xb0>
     212:	1a 30       	cpi	r17, 0x0A	; 10
     214:	11 f0       	breq	.+4      	; 0x21a <Long_Serial_Input+0xb0>
     216:	1e 32       	cpi	r17, 0x2E	; 46
     218:	71 f4       	brne	.+28     	; 0x236 <Long_Serial_Input+0xcc>
         {
            output_value=atol(input_values);
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	0e 94 33 05 	call	0xa66	; 0xa66 <atol>
     222:	4b 01       	movw	r8, r22
     224:	5c 01       	movw	r10, r24
            UART_Transmit(UART_addr,CR);
     226:	6d e0       	ldi	r22, 0x0D	; 13
     228:	c7 01       	movw	r24, r14
     22a:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
			UART_Transmit(UART_addr,LF);
     22e:	6a e0       	ldi	r22, 0x0A	; 10
     230:	c7 01       	movw	r24, r14
     232:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
         }
         if(index==10)
     236:	0a 30       	cpi	r16, 0x0A	; 10
     238:	71 f4       	brne	.+28     	; 0x256 <Long_Serial_Input+0xec>
         {
            output_value=atol(input_values);
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	0e 94 33 05 	call	0xa66	; 0xa66 <atol>
     242:	4b 01       	movw	r8, r22
     244:	5c 01       	movw	r10, r24
            UART_Transmit(UART_addr,CR);
     246:	6d e0       	ldi	r22, 0x0D	; 13
     248:	c7 01       	movw	r24, r14
     24a:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
			UART_Transmit(UART_addr,LF);
     24e:	6a e0       	ldi	r22, 0x0A	; 10
     250:	c7 01       	movw	r24, r14
     252:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
         }
      }while(output_value==0xffffffff);
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	88 16       	cp	r8, r24
     25a:	98 06       	cpc	r9, r24
     25c:	a8 06       	cpc	r10, r24
     25e:	b8 06       	cpc	r11, r24
     260:	09 f4       	brne	.+2      	; 0x264 <Long_Serial_Input+0xfa>
     262:	a7 cf       	rjmp	.-178    	; 0x1b2 <Long_Serial_Input+0x48>

return output_value;
}
     264:	c5 01       	movw	r24, r10
     266:	b4 01       	movw	r22, r8
     268:	2b 96       	adiw	r28, 0x0b	; 11
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	bf 90       	pop	r11
     282:	af 90       	pop	r10
     284:	9f 90       	pop	r9
     286:	8f 90       	pop	r8
     288:	08 95       	ret

0000028a <main>:
//uint8_t *array_ptr = array;

int main(void)
{
	//Initialize GPIO, UART, SPI, and SD Card
	GPIO_Output_Init(SD_CS_port, SD_CS_pin);
     28a:	60 e1       	ldi	r22, 0x10	; 16
     28c:	83 e2       	ldi	r24, 0x23	; 35
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 a5 00 	call	0x14a	; 0x14a <GPIO_Output_Init>
	UART_Init(UART1, 9600);
     294:	60 e8       	ldi	r22, 0x80	; 128
     296:	75 e2       	ldi	r23, 0x25	; 37
     298:	88 ec       	ldi	r24, 0xC8	; 200
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 80 04 	call	0x900	; 0x900 <UART_Init>
	SPI_Master_Init(SPI0, 400000);
     2a0:	40 e8       	ldi	r20, 0x80	; 128
     2a2:	5a e1       	ldi	r21, 0x1A	; 26
     2a4:	66 e0       	ldi	r22, 0x06	; 6
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	8c e4       	ldi	r24, 0x4C	; 76
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SPI_Master_Init>
	SD_Init();
     2b0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <SD_Init>
	print_buffer = Export_print_buffer();
     2b4:	0e 94 b7 04 	call	0x96e	; 0x96e <Export_print_buffer>
     2b8:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <print_buffer+0x1>
     2bc:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <print_buffer>

	//Prompts user for input, uses input to read block #
	for(;;)
	{
			sprintf(print_buffer, "Enter block #: ", prompt_string);
     2c0:	81 e1       	ldi	r24, 0x11	; 17
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	9f 93       	push	r25
     2c6:	8f 93       	push	r24
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <print_buffer+0x1>
     2d4:	8f 93       	push	r24
     2d6:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <print_buffer>
     2da:	8f 93       	push	r24
     2dc:	0e 94 6f 05 	call	0xade	; 0xade <sprintf>
			UART_Transmit_String(UART1, 0, print_buffer);
     2e0:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <print_buffer>
     2e4:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <print_buffer+0x1>
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	88 ec       	ldi	r24, 0xC8	; 200
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <UART_Transmit_String>
			GPIO_Output_Clear(SD_CS_port, SD_CS_pin);
     2f2:	60 e1       	ldi	r22, 0x10	; 16
     2f4:	83 e2       	ldi	r24, 0x23	; 35
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_Output_Clear>
			serial_input = Long_Serial_Input(UART1);
     2fc:	88 ec       	ldi	r24, 0xC8	; 200
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 b5 00 	call	0x16a	; 0x16a <Long_Serial_Input>
     304:	ab 01       	movw	r20, r22
     306:	bc 01       	movw	r22, r24
     308:	40 93 92 03 	sts	0x0392, r20	; 0x800392 <serial_input>
     30c:	50 93 93 03 	sts	0x0393, r21	; 0x800393 <serial_input+0x1>
     310:	60 93 94 03 	sts	0x0394, r22	; 0x800394 <serial_input+0x2>
     314:	70 93 95 03 	sts	0x0395, r23	; 0x800395 <serial_input+0x3>
			error_flag=Send_Command(CMD17,serial_input);
     318:	81 e1       	ldi	r24, 0x11	; 17
     31a:	0e 94 c3 02 	call	0x586	; 0x586 <Send_Command>
     31e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <error_flag>
			error_flag=read_block(SPI0, 512, data_array);
     322:	4a e8       	ldi	r20, 0x8A	; 138
     324:	51 e0       	ldi	r21, 0x01	; 1
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	72 e0       	ldi	r23, 0x02	; 2
     32a:	8c e4       	ldi	r24, 0x4C	; 76
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 30 04 	call	0x860	; 0x860 <read_block>
     332:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <error_flag>
			print_memory(UART1, 512, data_array);
     336:	4a e8       	ldi	r20, 0x8A	; 138
     338:	51 e0       	ldi	r21, 0x01	; 1
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	72 e0       	ldi	r23, 0x02	; 2
     33e:	88 ec       	ldi	r24, 0xC8	; 200
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 26 02 	call	0x44c	; 0x44c <print_memory>
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	b6 cf       	rjmp	.-148    	; 0x2c0 <main+0x36>

00000354 <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(volatile UART_t * UART_addr, uint8_t * array_in, uint16_t offset)
{
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	8c 01       	movw	r16, r24
     368:	7b 01       	movw	r14, r22
     36a:	5a 01       	movw	r10, r20
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
     36c:	0e 94 b7 04 	call	0x96e	; 0x96e <Export_print_buffer>
     370:	d8 2e       	mov	r13, r24
     372:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
     374:	ea 0c       	add	r14, r10
     376:	fb 1c       	adc	r15, r11
   sprintf(prnt_bffr, "%p ",input);
     378:	ff 92       	push	r15
     37a:	ef 92       	push	r14
     37c:	84 e2       	ldi	r24, 0x24	; 36
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	9f 93       	push	r25
     382:	8f 93       	push	r24
     384:	df 93       	push	r29
     386:	df 92       	push	r13
     388:	0e 94 6f 05 	call	0xade	; 0xade <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
     38c:	4d 2d       	mov	r20, r13
     38e:	5d 2f       	mov	r21, r29
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	c8 01       	movw	r24, r16
     394:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <UART_Transmit_String>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
     398:	bf 92       	push	r11
     39a:	af 92       	push	r10
     39c:	88 e2       	ldi	r24, 0x28	; 40
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	9f 93       	push	r25
     3a2:	8f 93       	push	r24
     3a4:	df 93       	push	r29
     3a6:	df 92       	push	r13
     3a8:	0e 94 6f 05 	call	0xade	; 0xade <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
     3ac:	4d 2d       	mov	r20, r13
     3ae:	5d 2f       	mov	r21, r29
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	c8 01       	movw	r24, r16
     3b4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <UART_Transmit_String>
   for (index=0;index<16;index++)
     3b8:	8d b7       	in	r24, 0x3d	; 61
     3ba:	9e b7       	in	r25, 0x3e	; 62
     3bc:	0c 96       	adiw	r24, 0x0c	; 12
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	9e bf       	out	0x3e, r25	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	8d bf       	out	0x3d, r24	; 61
     3c8:	c0 e0       	ldi	r28, 0x00	; 0
     3ca:	1b c0       	rjmp	.+54     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
   {
      dat=*(input+index);
     3cc:	f7 01       	movw	r30, r14
     3ce:	ec 0f       	add	r30, r28
     3d0:	f1 1d       	adc	r31, r1
     3d2:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
     3d4:	1f 92       	push	r1
     3d6:	8f 93       	push	r24
     3d8:	82 e3       	ldi	r24, 0x32	; 50
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	df 93       	push	r29
     3e2:	df 92       	push	r13
     3e4:	0e 94 6f 05 	call	0xade	; 0xade <sprintf>
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
     3e8:	4d 2d       	mov	r20, r13
     3ea:	5d 2f       	mov	r21, r29
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	c8 01       	movw	r24, r16
     3f0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <UART_Transmit_String>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   for (index=0;index<16;index++)
     3f4:	cf 5f       	subi	r28, 0xFF	; 255
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	c0 31       	cpi	r28, 0x10	; 16
     404:	18 f3       	brcs	.-58     	; 0x3cc <print_16bytes+0x78>
     406:	c0 e0       	ldi	r28, 0x00	; 0
     408:	0d c0       	rjmp	.+26     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
     40a:	f7 01       	movw	r30, r14
     40c:	ec 0f       	add	r30, r28
     40e:	f1 1d       	adc	r31, r1
     410:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
     412:	80 ee       	ldi	r24, 0xE0	; 224
     414:	86 0f       	add	r24, r22
     416:	80 36       	cpi	r24, 0x60	; 96
     418:	08 f0       	brcs	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     41a:	6e e2       	ldi	r22, 0x2E	; 46
      UART_Transmit(UART_addr,dat);
     41c:	c8 01       	movw	r24, r16
     41e:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
     422:	cf 5f       	subi	r28, 0xFF	; 255
     424:	c0 31       	cpi	r28, 0x10	; 16
     426:	88 f3       	brcs	.-30     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_Transmit(UART_addr,dat);
   }
   UART_Transmit(UART_addr,CR);
     428:	6d e0       	ldi	r22, 0x0D	; 13
     42a:	c8 01       	movw	r24, r16
     42c:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
   UART_Transmit(UART_addr,LF);
     430:	6a e0       	ldi	r22, 0x0A	; 10
     432:	c8 01       	movw	r24, r16
     434:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	08 95       	ret

0000044c <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(volatile UART_t * UART_addr, uint16_t number_of_bytes, uint8_t * array_in)
{
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	8c 01       	movw	r16, r24
     45e:	6b 01       	movw	r12, r22
     460:	7a 01       	movw	r14, r20
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
     462:	0e 94 b7 04 	call	0x96e	; 0x96e <Export_print_buffer>
     466:	ec 01       	movw	r28, r24
   
   input = 0;
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
     468:	ac 01       	movw	r20, r24
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	8c ec       	ldi	r24, 0xCC	; 204
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 ba 04 	call	0x974	; 0x974 <Copy_String_to_Buffer>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
     474:	ae 01       	movw	r20, r28
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	c8 01       	movw	r24, r16
     47a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <UART_Transmit_String>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
   
   input = 0;
     47e:	c0 e0       	ldi	r28, 0x00	; 0
     480:	d0 e0       	ldi	r29, 0x00	; 0
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   do
   {
      print_16bytes(UART_addr,array_in,input);
     482:	ae 01       	movw	r20, r28
     484:	b7 01       	movw	r22, r14
     486:	c8 01       	movw	r24, r16
     488:	0e 94 aa 01 	call	0x354	; 0x354 <print_16bytes>
      input+=16;
     48c:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
     48e:	cc 15       	cp	r28, r12
     490:	dd 05       	cpc	r29, r13
     492:	b8 f3       	brcs	.-18     	; 0x482 <print_memory+0x36>
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	df 90       	pop	r13
     4a2:	cf 90       	pop	r12
     4a4:	08 95       	ret

000004a6 <SPI_Master_Init>:

uint8_t error_status; 

//rcvd_val = SPI_Transfer(&SPI0, send_val,&error_flag)
void set_error_status(){
	error_status= receive_response(5,rec_values);
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	ec 01       	movw	r28, r24
     4ac:	9a 01       	movw	r18, r20
     4ae:	ab 01       	movw	r20, r22
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	74 e2       	ldi	r23, 0x24	; 36
     4b4:	84 ef       	ldi	r24, 0xF4	; 244
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 11 05 	call	0xa22	; 0xa22 <__udivmodsi4>
     4bc:	22 30       	cpi	r18, 0x02	; 2
     4be:	31 05       	cpc	r19, r1
     4c0:	28 f4       	brcc	.+10     	; 0x4cc <SPI_Master_Init+0x26>
     4c2:	80 e5       	ldi	r24, 0x50	; 80
     4c4:	88 83       	st	Y, r24
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	89 83       	std	Y+1, r24	; 0x01
     4ca:	2f c0       	rjmp	.+94     	; 0x52a <SPI_Master_Init+0x84>
     4cc:	24 30       	cpi	r18, 0x04	; 4
     4ce:	31 05       	cpc	r19, r1
     4d0:	20 f4       	brcc	.+8      	; 0x4da <SPI_Master_Init+0x34>
     4d2:	80 e5       	ldi	r24, 0x50	; 80
     4d4:	88 83       	st	Y, r24
     4d6:	19 82       	std	Y+1, r1	; 0x01
     4d8:	28 c0       	rjmp	.+80     	; 0x52a <SPI_Master_Init+0x84>
     4da:	28 30       	cpi	r18, 0x08	; 8
     4dc:	31 05       	cpc	r19, r1
     4de:	28 f4       	brcc	.+10     	; 0x4ea <SPI_Master_Init+0x44>
     4e0:	81 e5       	ldi	r24, 0x51	; 81
     4e2:	88 83       	st	Y, r24
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	20 c0       	rjmp	.+64     	; 0x52a <SPI_Master_Init+0x84>
     4ea:	20 31       	cpi	r18, 0x10	; 16
     4ec:	31 05       	cpc	r19, r1
     4ee:	20 f4       	brcc	.+8      	; 0x4f8 <SPI_Master_Init+0x52>
     4f0:	81 e5       	ldi	r24, 0x51	; 81
     4f2:	88 83       	st	Y, r24
     4f4:	19 82       	std	Y+1, r1	; 0x01
     4f6:	19 c0       	rjmp	.+50     	; 0x52a <SPI_Master_Init+0x84>
     4f8:	20 32       	cpi	r18, 0x20	; 32
     4fa:	31 05       	cpc	r19, r1
     4fc:	28 f4       	brcc	.+10     	; 0x508 <SPI_Master_Init+0x62>
     4fe:	82 e5       	ldi	r24, 0x52	; 82
     500:	88 83       	st	Y, r24
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	11 c0       	rjmp	.+34     	; 0x52a <SPI_Master_Init+0x84>
     508:	20 34       	cpi	r18, 0x40	; 64
     50a:	31 05       	cpc	r19, r1
     50c:	20 f4       	brcc	.+8      	; 0x516 <SPI_Master_Init+0x70>
     50e:	82 e5       	ldi	r24, 0x52	; 82
     510:	88 83       	st	Y, r24
     512:	19 82       	std	Y+1, r1	; 0x01
     514:	0a c0       	rjmp	.+20     	; 0x52a <SPI_Master_Init+0x84>
     516:	20 38       	cpi	r18, 0x80	; 128
     518:	31 05       	cpc	r19, r1
     51a:	20 f4       	brcc	.+8      	; 0x524 <SPI_Master_Init+0x7e>
     51c:	83 e5       	ldi	r24, 0x53	; 83
     51e:	88 83       	st	Y, r24
     520:	19 82       	std	Y+1, r1	; 0x01
     522:	03 c0       	rjmp	.+6      	; 0x52a <SPI_Master_Init+0x84>
     524:	83 e6       	ldi	r24, 0x63	; 99
     526:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <return_value>
     52a:	cc 34       	cpi	r28, 0x4C	; 76
     52c:	d1 05       	cpc	r29, r1
     52e:	59 f4       	brne	.+22     	; 0x546 <SPI_Master_Init+0xa0>
     530:	60 e2       	ldi	r22, 0x20	; 32
     532:	83 e2       	ldi	r24, 0x23	; 35
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 aa 00 	call	0x154	; 0x154 <GPIO_Output_Set>
     53a:	60 e2       	ldi	r22, 0x20	; 32
     53c:	83 e2       	ldi	r24, 0x23	; 35
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 a5 00 	call	0x14a	; 0x14a <GPIO_Output_Init>
     544:	0a c0       	rjmp	.+20     	; 0x55a <SPI_Master_Init+0xb4>
     546:	68 e0       	ldi	r22, 0x08	; 8
     548:	83 e2       	ldi	r24, 0x23	; 35
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 aa 00 	call	0x154	; 0x154 <GPIO_Output_Set>
     550:	68 e0       	ldi	r22, 0x08	; 8
     552:	83 e2       	ldi	r24, 0x23	; 35
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 a5 00 	call	0x14a	; 0x14a <GPIO_Output_Init>
     55a:	60 e8       	ldi	r22, 0x80	; 128
     55c:	83 e2       	ldi	r24, 0x23	; 35
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_Output_Clear>
     564:	60 e8       	ldi	r22, 0x80	; 128
     566:	83 e2       	ldi	r24, 0x23	; 35
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 a5 00 	call	0x14a	; 0x14a <GPIO_Output_Init>
     56e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <return_value>
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <SPI_Transfer>:
     578:	fc 01       	movw	r30, r24
     57a:	62 83       	std	Z+2, r22	; 0x02
     57c:	91 81       	ldd	r25, Z+1	; 0x01
     57e:	99 23       	and	r25, r25
     580:	ec f7       	brge	.-6      	; 0x57c <SPI_Transfer+0x4>
     582:	82 81       	ldd	r24, Z+2	; 0x02
     584:	08 95       	ret

00000586 <Send_Command>:
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	80 34       	cpi	r24, 0x40	; 64
     594:	80 f4       	brcc	.+32     	; 0x5b6 <Send_Command+0x30>
     596:	6a 01       	movw	r12, r20
     598:	7b 01       	movw	r14, r22
     59a:	d8 2f       	mov	r29, r24
     59c:	8e e6       	ldi	r24, 0x6E	; 110
     59e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <return_value>
     5a2:	6d 2f       	mov	r22, r29
     5a4:	60 64       	ori	r22, 0x40	; 64
     5a6:	8c e4       	ldi	r24, 0x4C	; 76
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     5ae:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
     5b4:	1e c0       	rjmp	.+60     	; 0x5f2 <Send_Command+0x6c>
     5b6:	89 e6       	ldi	r24, 0x69	; 105
     5b8:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <return_value>
     5bc:	2d c0       	rjmp	.+90     	; 0x618 <Send_Command+0x92>
     5be:	23 e0       	ldi	r18, 0x03	; 3
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	2c 1b       	sub	r18, r28
     5c4:	31 09       	sbc	r19, r1
     5c6:	22 0f       	add	r18, r18
     5c8:	33 1f       	adc	r19, r19
     5ca:	22 0f       	add	r18, r18
     5cc:	33 1f       	adc	r19, r19
     5ce:	22 0f       	add	r18, r18
     5d0:	33 1f       	adc	r19, r19
     5d2:	c7 01       	movw	r24, r14
     5d4:	b6 01       	movw	r22, r12
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <Send_Command+0x5a>
     5d8:	96 95       	lsr	r25
     5da:	87 95       	ror	r24
     5dc:	77 95       	ror	r23
     5de:	67 95       	ror	r22
     5e0:	2a 95       	dec	r18
     5e2:	d2 f7       	brpl	.-12     	; 0x5d8 <Send_Command+0x52>
     5e4:	8c e4       	ldi	r24, 0x4C	; 76
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     5ec:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
     5f0:	cf 5f       	subi	r28, 0xFF	; 255
     5f2:	c4 30       	cpi	r28, 0x04	; 4
     5f4:	20 f3       	brcs	.-56     	; 0x5be <Send_Command+0x38>
     5f6:	dd 23       	and	r29, r29
     5f8:	21 f0       	breq	.+8      	; 0x602 <Send_Command+0x7c>
     5fa:	d8 30       	cpi	r29, 0x08	; 8
     5fc:	21 f4       	brne	.+8      	; 0x606 <Send_Command+0x80>
     5fe:	66 e8       	ldi	r22, 0x86	; 134
     600:	03 c0       	rjmp	.+6      	; 0x608 <Send_Command+0x82>
     602:	64 e9       	ldi	r22, 0x94	; 148
     604:	01 c0       	rjmp	.+2      	; 0x608 <Send_Command+0x82>
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	8c e4       	ldi	r24, 0x4C	; 76
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     610:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
     614:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <return_value>
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	08 95       	ret

00000626 <receive_response>:
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	d8 2f       	mov	r29, r24
     630:	8b 01       	movw	r16, r22
     632:	8e e6       	ldi	r24, 0x6E	; 110
     634:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <return_value>
     638:	c0 e0       	ldi	r28, 0x00	; 0
     63a:	6f ef       	ldi	r22, 0xFF	; 255
     63c:	8c e4       	ldi	r24, 0x4C	; 76
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     644:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
     648:	cf 5f       	subi	r28, 0xFF	; 255
     64a:	8f 3f       	cpi	r24, 0xFF	; 255
     64c:	11 f4       	brne	.+4      	; 0x652 <receive_response+0x2c>
     64e:	c1 11       	cpse	r28, r1
     650:	f4 cf       	rjmp	.-24     	; 0x63a <receive_response+0x14>
     652:	c1 11       	cpse	r28, r1
     654:	04 c0       	rjmp	.+8      	; 0x65e <receive_response+0x38>
     656:	84 e7       	ldi	r24, 0x74	; 116
     658:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <return_value>
     65c:	1e c0       	rjmp	.+60     	; 0x69a <receive_response+0x74>
     65e:	98 2f       	mov	r25, r24
     660:	9e 7f       	andi	r25, 0xFE	; 254
     662:	31 f0       	breq	.+12     	; 0x670 <receive_response+0x4a>
     664:	f8 01       	movw	r30, r16
     666:	80 83       	st	Z, r24
     668:	84 e6       	ldi	r24, 0x64	; 100
     66a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <return_value>
     66e:	15 c0       	rjmp	.+42     	; 0x69a <receive_response+0x74>
     670:	f8 01       	movw	r30, r16
     672:	80 83       	st	Z, r24
     674:	d2 30       	cpi	r29, 0x02	; 2
     676:	70 f4       	brcc	.+28     	; 0x694 <receive_response+0x6e>
     678:	10 c0       	rjmp	.+32     	; 0x69a <receive_response+0x74>
     67a:	6f ef       	ldi	r22, 0xFF	; 255
     67c:	8c e4       	ldi	r24, 0x4C	; 76
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     684:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
     688:	f8 01       	movw	r30, r16
     68a:	ec 0f       	add	r30, r28
     68c:	f1 1d       	adc	r31, r1
     68e:	80 83       	st	Z, r24
     690:	cf 5f       	subi	r28, 0xFF	; 255
     692:	01 c0       	rjmp	.+2      	; 0x696 <receive_response+0x70>
     694:	c1 e0       	ldi	r28, 0x01	; 1
     696:	cd 17       	cp	r28, r29
     698:	80 f3       	brcs	.-32     	; 0x67a <receive_response+0x54>
     69a:	6f ef       	ldi	r22, 0xFF	; 255
     69c:	8c e4       	ldi	r24, 0x4C	; 76
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     6a4:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
     6a8:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <return_value>
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	08 95       	ret

000006b6 <SD_Init>:
	rcvd_val=SPI_Transfer(SD_SPI_port,0xFF);
	return return_value;
}

uint8_t SD_Init(void)
{
     6b6:	cf 93       	push	r28
	uint32_t ACMD41_arg = 0x00000000;
	uint8_t timeout = 0;
	GPIO_Output_Set(SD_CS_port, SD_CS_pin);
     6b8:	60 e1       	ldi	r22, 0x10	; 16
     6ba:	83 e2       	ldi	r24, 0x23	; 35
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 aa 00 	call	0x154	; 0x154 <GPIO_Output_Set>
	for(uint8_t i = 1; i<=10; i++)
     6c2:	c1 e0       	ldi	r28, 0x01	; 1
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <SD_Init+0x1c>
	{
		SPI_Transfer(SPI0, 0xFF);
     6c6:	6f ef       	ldi	r22, 0xFF	; 255
     6c8:	8c e4       	ldi	r24, 0x4C	; 76
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
uint8_t SD_Init(void)
{
	uint32_t ACMD41_arg = 0x00000000;
	uint8_t timeout = 0;
	GPIO_Output_Set(SD_CS_port, SD_CS_pin);
	for(uint8_t i = 1; i<=10; i++)
     6d0:	cf 5f       	subi	r28, 0xFF	; 255
     6d2:	cb 30       	cpi	r28, 0x0B	; 11
     6d4:	c0 f3       	brcs	.-16     	; 0x6c6 <SD_Init+0x10>
	{
		SPI_Transfer(SPI0, 0xFF);
	}
	
	GPIO_Output_Clear(SD_CS_port, SD_CS_pin);
     6d6:	60 e1       	ldi	r22, 0x10	; 16
     6d8:	83 e2       	ldi	r24, 0x23	; 35
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_Output_Clear>
	Send_Command(CMD0, 0x00);
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	ba 01       	movw	r22, r20
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	0e 94 c3 02 	call	0x586	; 0x586 <Send_Command>
	error_status = receive_response(5, rec_values);
     6ec:	6d e8       	ldi	r22, 0x8D	; 141
     6ee:	73 e0       	ldi	r23, 0x03	; 3
     6f0:	85 e0       	ldi	r24, 0x05	; 5
     6f2:	0e 94 13 03 	call	0x626	; 0x626 <receive_response>
     6f6:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <error_status>
	
	if(error_status==no_errors)
     6fa:	8e 36       	cpi	r24, 0x6E	; 110
     6fc:	09 f0       	breq	.+2      	; 0x700 <SD_Init+0x4a>
     6fe:	a0 c0       	rjmp	.+320    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	{
		GPIO_Output_Clear(SD_CS_port,SD_CS_pin);
     700:	60 e1       	ldi	r22, 0x10	; 16
     702:	83 e2       	ldi	r24, 0x23	; 35
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_Output_Clear>
		error_flag = Send_Command(CMD8, 0x000001AA);
     70a:	4a ea       	ldi	r20, 0xAA	; 170
     70c:	51 e0       	ldi	r21, 0x01	; 1
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	88 e0       	ldi	r24, 0x08	; 8
     714:	0e 94 c3 02 	call	0x586	; 0x586 <Send_Command>
     718:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <error_flag>
		if(error_flag==no_errors)
     71c:	8e 36       	cpi	r24, 0x6E	; 110
     71e:	39 f4       	brne	.+14     	; 0x72e <SD_Init+0x78>
		{
			error_flag=receive_response(5,rec_values);
     720:	6d e8       	ldi	r22, 0x8D	; 141
     722:	73 e0       	ldi	r23, 0x03	; 3
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	0e 94 13 03 	call	0x626	; 0x626 <receive_response>
     72a:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <error_flag>
		}
		
		GPIO_Output_Set(SD_CS_port, SD_CS_pin);
     72e:	60 e1       	ldi	r22, 0x10	; 16
     730:	83 e2       	ldi	r24, 0x23	; 35
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 aa 00 	call	0x154	; 0x154 <GPIO_Output_Set>
		if((rec_values[0]==0x01)&&(error_flag==no_errors))
     738:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <rec_values>
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	09 f0       	breq	.+2      	; 0x742 <SD_Init+0x8c>
     740:	7b c0       	rjmp	.+246    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     742:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <error_flag>
     746:	9e 36       	cpi	r25, 0x6E	; 110
     748:	09 f0       	breq	.+2      	; 0x74c <SD_Init+0x96>
     74a:	76 c0       	rjmp	.+236    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		{
		//Check voltage compatibility:
			if((rec_values[0]==0x01)&&(rec_values[4]==0xAA))
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	09 f0       	breq	.+2      	; 0x752 <SD_Init+0x9c>
     750:	6f c0       	rjmp	.+222    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     752:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <rec_values+0x4>
     756:	8a 3a       	cpi	r24, 0xAA	; 170
     758:	09 f0       	breq	.+2      	; 0x75c <SD_Init+0xa6>
     75a:	6a c0       	rjmp	.+212    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			{
				ACMD41_arg=0x40000000; // High-Capacity Support
				GPIO_Output_Clear(SD_CS_port,SD_CS_pin);
     75c:	60 e1       	ldi	r22, 0x10	; 16
     75e:	83 e2       	ldi	r24, 0x23	; 35
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_Output_Clear>
				Send_Command(CMD58, 0x00);
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	ba 01       	movw	r22, r20
     76c:	8a e3       	ldi	r24, 0x3A	; 58
     76e:	0e 94 c3 02 	call	0x586	; 0x586 <Send_Command>
				error_flag=receive_response(5,rec_values);
     772:	6d e8       	ldi	r22, 0x8D	; 141
     774:	73 e0       	ldi	r23, 0x03	; 3
     776:	85 e0       	ldi	r24, 0x05	; 5
     778:	0e 94 13 03 	call	0x626	; 0x626 <receive_response>
     77c:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <error_flag>
				GPIO_Output_Set(SD_CS_port, SD_CS_pin);
     780:	60 e1       	ldi	r22, 0x10	; 16
     782:	83 e2       	ldi	r24, 0x23	; 35
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 aa 00 	call	0x154	; 0x154 <GPIO_Output_Set>
				//check R1 response is 0x01
				if((rec_values[0]==0x01))
     78a:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <rec_values>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	09 f0       	breq	.+2      	; 0x794 <SD_Init+0xde>
     792:	62 c0       	rjmp	.+196    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
				{
					//check bit 20 and 21 in the r3 response
					if(rec_values[2] & 0x4 || rec_values[2] & 0x5)
     794:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <rec_values+0x2>
     798:	82 fd       	sbrc	r24, 2
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <SD_Init+0xec>
     79c:	85 70       	andi	r24, 0x05	; 5
     79e:	09 f4       	brne	.+2      	; 0x7a2 <SD_Init+0xec>
     7a0:	5b c0       	rjmp	.+182    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
					{
						GPIO_Output_Clear(SD_CS_port,SD_CS_pin);
     7a2:	60 e1       	ldi	r22, 0x10	; 16
     7a4:	83 e2       	ldi	r24, 0x23	; 35
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_Output_Clear>
}

uint8_t SD_Init(void)
{
	uint32_t ACMD41_arg = 0x00000000;
	uint8_t timeout = 0;
     7ac:	c0 e0       	ldi	r28, 0x00	; 0
					{
						GPIO_Output_Clear(SD_CS_port,SD_CS_pin);

						do 
						{
							Send_Command(CMD55, 0x00);
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	ba 01       	movw	r22, r20
     7b4:	87 e3       	ldi	r24, 0x37	; 55
     7b6:	0e 94 c3 02 	call	0x586	; 0x586 <Send_Command>
							error_flag= receive_response(5, rec_values);
     7ba:	6d e8       	ldi	r22, 0x8D	; 141
     7bc:	73 e0       	ldi	r23, 0x03	; 3
     7be:	85 e0       	ldi	r24, 0x05	; 5
     7c0:	0e 94 13 03 	call	0x626	; 0x626 <receive_response>
     7c4:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <error_flag>
							Send_Command(CMD41, ACMD41_arg);
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e4       	ldi	r23, 0x40	; 64
     7d0:	89 e2       	ldi	r24, 0x29	; 41
     7d2:	0e 94 c3 02 	call	0x586	; 0x586 <Send_Command>
							error_flag= receive_response(5, rec_values);
     7d6:	6d e8       	ldi	r22, 0x8D	; 141
     7d8:	73 e0       	ldi	r23, 0x03	; 3
     7da:	85 e0       	ldi	r24, 0x05	; 5
     7dc:	0e 94 13 03 	call	0x626	; 0x626 <receive_response>
     7e0:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <error_flag>
							timeout++;
     7e4:	cf 5f       	subi	r28, 0xFF	; 255
						}while(rec_values[0]!=0x00 && timeout !=0);
     7e6:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <rec_values>
     7ea:	88 23       	and	r24, r24
     7ec:	11 f0       	breq	.+4      	; 0x7f2 <SD_Init+0x13c>
     7ee:	c1 11       	cpse	r28, r1
     7f0:	de cf       	rjmp	.-68     	; 0x7ae <SD_Init+0xf8>
						
						if(return_value==no_errors)
     7f2:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <return_value>
     7f6:	8e 36       	cpi	r24, 0x6E	; 110
     7f8:	79 f5       	brne	.+94     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
						{
							Send_Command(CMD58, 0x00);
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	ba 01       	movw	r22, r20
     800:	8a e3       	ldi	r24, 0x3A	; 58
     802:	0e 94 c3 02 	call	0x586	; 0x586 <Send_Command>
							error_flag = receive_response(5, rec_values);
     806:	6d e8       	ldi	r22, 0x8D	; 141
     808:	73 e0       	ldi	r23, 0x03	; 3
     80a:	85 e0       	ldi	r24, 0x05	; 5
     80c:	0e 94 13 03 	call	0x626	; 0x626 <receive_response>
     810:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <error_flag>
							if (rec_values[1] & 0x80)
     814:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <rec_values+0x1>
     818:	88 23       	and	r24, r24
     81a:	f4 f4       	brge	.+60     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
							{
								if(rec_values[1] & 0x40 )
     81c:	86 ff       	sbrs	r24, 6
     81e:	04 c0       	rjmp	.+8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
								{
									SD_card_type = 'h';
     820:	88 e6       	ldi	r24, 0x68	; 104
     822:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     826:	18 c0       	rjmp	.+48     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
								}
								else
								{
									SD_card_type = 's';
     828:	83 e7       	ldi	r24, 0x73	; 115
     82a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     82e:	14 c0       	rjmp	.+40     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
						}
					}
				}
			else
			{
				error_status= incompatible_voltage;
     830:	86 e7       	ldi	r24, 0x76	; 118
     832:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <error_status>
     836:	10 c0       	rjmp	.+32     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			}
		}
		else
		{
			error_status=illegal_command;
     838:	89 e6       	ldi	r24, 0x69	; 105
     83a:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <error_status>
     83e:	0c c0       	rjmp	.+24     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		}
	}
	else if(rec_values[0]==0x05)
     840:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <rec_values>
     844:	85 30       	cpi	r24, 0x05	; 5
     846:	21 f4       	brne	.+8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	{
		error_status=no_errors; // if supporting older cards
     848:	8e e6       	ldi	r24, 0x6E	; 110
     84a:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <error_status>
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		ACMD41_arg=0x00000000; // No High-Capacity Support	
	}
	else
	{
		//Return a value that would help determine the problem
		error_status=error_flag;
     850:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <error_flag>
     854:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <error_status>
	}
	return error_status;
}
     858:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <error_status>
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <read_block>:



uint8_t read_block( volatile SPI_t *SPI_base, uint16_t num_bytes, uint8_t *array)
{
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	ec 01       	movw	r28, r24
     872:	7b 01       	movw	r14, r22
     874:	6a 01       	movw	r12, r20
	do
	{
		rcvd_val=SPI_Transfer(SPI_base,0xFF); //SPI_Receive
     876:	6f ef       	ldi	r22, 0xFF	; 255
     878:	ce 01       	movw	r24, r28
     87a:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     87e:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
	}while(rcvd_val==0xFF);
     882:	8f 3f       	cpi	r24, 0xFF	; 255
     884:	c1 f3       	breq	.-16     	; 0x876 <read_block+0x16>
	
	if(rcvd_val == 0x00)
     886:	81 11       	cpse	r24, r1
     888:	32 c0       	rjmp	.+100    	; 0x8ee <read_block+0x8e>
	{
		do
		{
			rcvd_val=SPI_Transfer(SPI_base,0xFF);
     88a:	6f ef       	ldi	r22, 0xFF	; 255
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     892:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
		}while(rcvd_val==0xFF);
     896:	8f 3f       	cpi	r24, 0xFF	; 255
     898:	c1 f3       	breq	.-16     	; 0x88a <read_block+0x2a>
		
		if(rcvd_val == 0xFE)
     89a:	8e 3f       	cpi	r24, 0xFE	; 254
     89c:	31 f5       	brne	.+76     	; 0x8ea <read_block+0x8a>
     89e:	0d c0       	rjmp	.+26     	; 0x8ba <read_block+0x5a>
		{
			for(uint16_t index=0; index<num_bytes; index++)  //index must 16-bits
			{
				rcvd_val=SPI_Transfer(SPI_base,0xFF);
     8a0:	6f ef       	ldi	r22, 0xFF	; 255
     8a2:	ce 01       	movw	r24, r28
     8a4:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     8a8:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
				*(array+index)=rcvd_val;
     8ac:	f6 01       	movw	r30, r12
     8ae:	e0 0f       	add	r30, r16
     8b0:	f1 1f       	adc	r31, r17
     8b2:	80 83       	st	Z, r24
			rcvd_val=SPI_Transfer(SPI_base,0xFF);
		}while(rcvd_val==0xFF);
		
		if(rcvd_val == 0xFE)
		{
			for(uint16_t index=0; index<num_bytes; index++)  //index must 16-bits
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <read_block+0x5e>
     8ba:	00 e0       	ldi	r16, 0x00	; 0
     8bc:	10 e0       	ldi	r17, 0x00	; 0
     8be:	0e 15       	cp	r16, r14
     8c0:	1f 05       	cpc	r17, r15
     8c2:	70 f3       	brcs	.-36     	; 0x8a0 <read_block+0x40>
			{
				rcvd_val=SPI_Transfer(SPI_base,0xFF);
				*(array+index)=rcvd_val;
			}
			
		rcvd_val=SPI_Transfer(SPI_base,0xFF);
     8c4:	6f ef       	ldi	r22, 0xFF	; 255
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     8cc:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
		rcvd_val=SPI_Transfer(SPI_base,0xFF);
     8d0:	6f ef       	ldi	r22, 0xFF	; 255
     8d2:	ce 01       	movw	r24, r28
     8d4:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     8d8:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
		rcvd_val=SPI_Transfer(SPI_base,0xFF);
     8dc:	6f ef       	ldi	r22, 0xFF	; 255
     8de:	ce 01       	movw	r24, r28
     8e0:	0e 94 bc 02 	call	0x578	; 0x578 <SPI_Transfer>
     8e4:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <rcvd_val>
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <read_block+0x8e>
		}
		else 
		{
			return start_token_error;
     8ea:	83 e7       	ldi	r24, 0x73	; 115
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <read_block+0x8e>
		}
	}
	
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	08 95       	ret

00000900 <UART_Init>:




void UART_Init (volatile UART_t * UART_addr, uint16_t Baud_Rate)
{
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)(((F_CPU/F_DIV)/(8UL*(2-U2X_bit)*Baud_Rate))-1);
     906:	cb 01       	movw	r24, r22
     908:	a0 e0       	ldi	r26, 0x00	; 0
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	aa 1f       	adc	r26, r26
     912:	bb 1f       	adc	r27, r27
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	aa 1f       	adc	r26, r26
     91a:	bb 1f       	adc	r27, r27
     91c:	9c 01       	movw	r18, r24
     91e:	ad 01       	movw	r20, r26
     920:	22 0f       	add	r18, r18
     922:	33 1f       	adc	r19, r19
     924:	44 1f       	adc	r20, r20
     926:	55 1f       	adc	r21, r21
     928:	22 0f       	add	r18, r18
     92a:	33 1f       	adc	r19, r19
     92c:	44 1f       	adc	r20, r20
     92e:	55 1f       	adc	r21, r21
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	74 e2       	ldi	r23, 0x24	; 36
     934:	84 ef       	ldi	r24, 0xF4	; 244
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 11 05 	call	0xa22	; 0xa22 <__udivmodsi4>
     93c:	21 50       	subi	r18, 0x01	; 1
     93e:	31 09       	sbc	r19, r1
	
	(UART_addr->UBBRH) = (Baud_Rate_Reload / 256);
     940:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UBBRL) = (Baud_Rate_Reload % 256);
     942:	2c 83       	std	Y+4, r18	; 0x04
		
	(UART_addr->UCSRA) = U2X_bit<<U2X_shift;
     944:	18 82       	st	Y, r1
	(UART_addr->UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
     946:	86 e0       	ldi	r24, 0x06	; 6
     948:	8a 83       	std	Y+2, r24	; 0x02
	(UART_addr->UCSRB) = RX_enable|TX_enable;
     94a:	88 e1       	ldi	r24, 0x18	; 24
     94c:	89 83       	std	Y+1, r24	; 0x01
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <UART_Transmit>:

char UART_Transmit(volatile UART_t * UART_addr, char c)
{
     954:	fc 01       	movw	r30, r24
	uint8_t status;
	do
	{
		status=(UART_addr->UCSRA);
     956:	90 81       	ld	r25, Z
	} while ((status & (1 << UDRE))!=(1 << UDRE));
     958:	95 ff       	sbrs	r25, 5
     95a:	fd cf       	rjmp	.-6      	; 0x956 <UART_Transmit+0x2>
	(UART_addr->UDR) = c;
     95c:	66 83       	std	Z+6, r22	; 0x06
	return 0;
}
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 95       	ret

00000962 <UART_Receive>:


char UART_Receive(volatile UART_t * UART_addr)
{
     962:	fc 01       	movw	r30, r24
	uint8_t status;
	do 
	{
		status=(UART_addr->UCSRA);
     964:	90 81       	ld	r25, Z
	} while ((status & (1 << RXC))!=(1 << RXC));
     966:	99 23       	and	r25, r25
     968:	ec f7       	brge	.-6      	; 0x964 <UART_Receive+0x2>
	return (UART_addr->UDR);  // return the value in the receive buffer
     96a:	86 81       	ldd	r24, Z+6	; 0x06
}
     96c:	08 95       	ret

0000096e <Export_print_buffer>:

char * Export_print_buffer(void)
{
	
	return print_buffer;
}
     96e:	8a e3       	ldi	r24, 0x3A	; 58
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	08 95       	ret

00000974 <Copy_String_to_Buffer>:

uint8_t Copy_String_to_Buffer(const char flash_string[], uint8_t num_bytes, char buffer_p[])
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
     97a:	61 11       	cpse	r22, r1
     97c:	1a c0       	rjmp	.+52     	; 0x9b2 <Copy_String_to_Buffer+0x3e>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
     97e:	26 2f       	mov	r18, r22
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	fd 01       	movw	r30, r26
     984:	e2 0f       	add	r30, r18
     986:	f3 1f       	adc	r31, r19
     988:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
     98a:	ea 01       	movw	r28, r20
     98c:	c2 0f       	add	r28, r18
     98e:	d3 1f       	adc	r29, r19
     990:	e8 83       	st	Y, r30
			index++;
     992:	6f 5f       	subi	r22, 0xFF	; 255
		} while (value!=0);
     994:	e1 11       	cpse	r30, r1
     996:	f3 cf       	rjmp	.-26     	; 0x97e <Copy_String_to_Buffer+0xa>
     998:	0f c0       	rjmp	.+30     	; 0x9b8 <Copy_String_to_Buffer+0x44>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
     99a:	29 2f       	mov	r18, r25
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	fd 01       	movw	r30, r26
     9a0:	e2 0f       	add	r30, r18
     9a2:	f3 1f       	adc	r31, r19
     9a4:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
     9a6:	ea 01       	movw	r28, r20
     9a8:	c2 0f       	add	r28, r18
     9aa:	d3 1f       	adc	r29, r19
     9ac:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
     9ae:	9f 5f       	subi	r25, 0xFF	; 255
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <Copy_String_to_Buffer+0x40>
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	96 17       	cp	r25, r22
     9b6:	88 f3       	brcs	.-30     	; 0x99a <Copy_String_to_Buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
     9b8:	86 2f       	mov	r24, r22
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <UART_Transmit_String>:

void UART_Transmit_String(volatile UART_t * UART_addr, uint8_t num_bytes, char * string_name)
{
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	7c 01       	movw	r14, r24
     9ce:	06 2f       	mov	r16, r22
     9d0:	ea 01       	movw	r28, r20
	char temp8;
	int8_t index;
	if(num_bytes==0)
     9d2:	61 11       	cpse	r22, r1
     9d4:	15 c0       	rjmp	.+42     	; 0xa00 <UART_Transmit_String+0x40>
	{
		temp8=*string_name;
     9d6:	68 81       	ld	r22, Y
		while (temp8!=0)
     9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <UART_Transmit_String+0x24>
		{
			UART_Transmit(UART_addr, temp8);
     9da:	c7 01       	movw	r24, r14
     9dc:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
			string_name++;
     9e0:	21 96       	adiw	r28, 0x01	; 1
			temp8=*string_name;
     9e2:	68 81       	ld	r22, Y
	char temp8;
	int8_t index;
	if(num_bytes==0)
	{
		temp8=*string_name;
		while (temp8!=0)
     9e4:	61 11       	cpse	r22, r1
     9e6:	f9 cf       	rjmp	.-14     	; 0x9da <UART_Transmit_String+0x1a>
     9e8:	15 c0       	rjmp	.+42     	; 0xa14 <UART_Transmit_String+0x54>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_Transmit(UART_addr, string_name[index]);
     9ea:	fe 01       	movw	r30, r28
     9ec:	e1 0f       	add	r30, r17
     9ee:	f1 1d       	adc	r31, r1
     9f0:	17 fd       	sbrc	r17, 7
     9f2:	fa 95       	dec	r31
     9f4:	60 81       	ld	r22, Z
     9f6:	c7 01       	movw	r24, r14
     9f8:	0e 94 aa 04 	call	0x954	; 0x954 <UART_Transmit>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
     9fc:	1f 5f       	subi	r17, 0xFF	; 255
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <UART_Transmit_String+0x42>
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	20 2f       	mov	r18, r16
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	81 2f       	mov	r24, r17
     a08:	01 2e       	mov	r0, r17
     a0a:	00 0c       	add	r0, r0
     a0c:	99 0b       	sbc	r25, r25
     a0e:	82 17       	cp	r24, r18
     a10:	93 07       	cpc	r25, r19
     a12:	5c f3       	brlt	.-42     	; 0x9ea <UART_Transmit_String+0x2a>
		{
			UART_Transmit(UART_addr, string_name[index]);
		}
	}
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__udivmodsi4>:
     a22:	a1 e2       	ldi	r26, 0x21	; 33
     a24:	1a 2e       	mov	r1, r26
     a26:	aa 1b       	sub	r26, r26
     a28:	bb 1b       	sub	r27, r27
     a2a:	fd 01       	movw	r30, r26
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__udivmodsi4_ep>

00000a2e <__udivmodsi4_loop>:
     a2e:	aa 1f       	adc	r26, r26
     a30:	bb 1f       	adc	r27, r27
     a32:	ee 1f       	adc	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	a2 17       	cp	r26, r18
     a38:	b3 07       	cpc	r27, r19
     a3a:	e4 07       	cpc	r30, r20
     a3c:	f5 07       	cpc	r31, r21
     a3e:	20 f0       	brcs	.+8      	; 0xa48 <__udivmodsi4_ep>
     a40:	a2 1b       	sub	r26, r18
     a42:	b3 0b       	sbc	r27, r19
     a44:	e4 0b       	sbc	r30, r20
     a46:	f5 0b       	sbc	r31, r21

00000a48 <__udivmodsi4_ep>:
     a48:	66 1f       	adc	r22, r22
     a4a:	77 1f       	adc	r23, r23
     a4c:	88 1f       	adc	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	1a 94       	dec	r1
     a52:	69 f7       	brne	.-38     	; 0xa2e <__udivmodsi4_loop>
     a54:	60 95       	com	r22
     a56:	70 95       	com	r23
     a58:	80 95       	com	r24
     a5a:	90 95       	com	r25
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	bd 01       	movw	r22, r26
     a62:	cf 01       	movw	r24, r30
     a64:	08 95       	ret

00000a66 <atol>:
     a66:	1f 93       	push	r17
     a68:	fc 01       	movw	r30, r24
     a6a:	99 27       	eor	r25, r25
     a6c:	88 27       	eor	r24, r24
     a6e:	bc 01       	movw	r22, r24
     a70:	e8 94       	clt
     a72:	11 91       	ld	r17, Z+
     a74:	10 32       	cpi	r17, 0x20	; 32
     a76:	e9 f3       	breq	.-6      	; 0xa72 <atol+0xc>
     a78:	19 30       	cpi	r17, 0x09	; 9
     a7a:	10 f0       	brcs	.+4      	; 0xa80 <atol+0x1a>
     a7c:	1e 30       	cpi	r17, 0x0E	; 14
     a7e:	c8 f3       	brcs	.-14     	; 0xa72 <atol+0xc>
     a80:	1b 32       	cpi	r17, 0x2B	; 43
     a82:	51 f0       	breq	.+20     	; 0xa98 <atol+0x32>
     a84:	1d 32       	cpi	r17, 0x2D	; 45
     a86:	49 f4       	brne	.+18     	; 0xa9a <atol+0x34>
     a88:	68 94       	set
     a8a:	06 c0       	rjmp	.+12     	; 0xa98 <atol+0x32>
     a8c:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsi_const_10>
     a90:	61 0f       	add	r22, r17
     a92:	71 1d       	adc	r23, r1
     a94:	81 1d       	adc	r24, r1
     a96:	91 1d       	adc	r25, r1
     a98:	11 91       	ld	r17, Z+
     a9a:	10 53       	subi	r17, 0x30	; 48
     a9c:	1a 30       	cpi	r17, 0x0A	; 10
     a9e:	b0 f3       	brcs	.-20     	; 0xa8c <atol+0x26>
     aa0:	3e f4       	brtc	.+14     	; 0xab0 <atol+0x4a>
     aa2:	90 95       	com	r25
     aa4:	80 95       	com	r24
     aa6:	70 95       	com	r23
     aa8:	61 95       	neg	r22
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	8f 4f       	sbci	r24, 0xFF	; 255
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	1f 91       	pop	r17
     ab2:	08 95       	ret

00000ab4 <__mulsi_const_10>:
     ab4:	59 2f       	mov	r21, r25
     ab6:	48 2f       	mov	r20, r24
     ab8:	37 2f       	mov	r19, r23
     aba:	26 2f       	mov	r18, r22
     abc:	66 0f       	add	r22, r22
     abe:	77 1f       	adc	r23, r23
     ac0:	88 1f       	adc	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	66 0f       	add	r22, r22
     ac6:	77 1f       	adc	r23, r23
     ac8:	88 1f       	adc	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	62 0f       	add	r22, r18
     ace:	73 1f       	adc	r23, r19
     ad0:	84 1f       	adc	r24, r20
     ad2:	95 1f       	adc	r25, r21
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	88 1f       	adc	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	08 95       	ret

00000ade <sprintf>:
     ade:	ae e0       	ldi	r26, 0x0E	; 14
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	e5 e7       	ldi	r30, 0x75	; 117
     ae4:	f5 e0       	ldi	r31, 0x05	; 5
     ae6:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__prologue_saves__+0x1c>
     aea:	0d 89       	ldd	r16, Y+21	; 0x15
     aec:	1e 89       	ldd	r17, Y+22	; 0x16
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	8c 83       	std	Y+4, r24	; 0x04
     af2:	1a 83       	std	Y+2, r17	; 0x02
     af4:	09 83       	std	Y+1, r16	; 0x01
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	9f e7       	ldi	r25, 0x7F	; 127
     afa:	9e 83       	std	Y+6, r25	; 0x06
     afc:	8d 83       	std	Y+5, r24	; 0x05
     afe:	ae 01       	movw	r20, r28
     b00:	47 5e       	subi	r20, 0xE7	; 231
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	6f 89       	ldd	r22, Y+23	; 0x17
     b06:	78 8d       	ldd	r23, Y+24	; 0x18
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 91 05 	call	0xb22	; 0xb22 <vfprintf>
     b10:	ef 81       	ldd	r30, Y+7	; 0x07
     b12:	f8 85       	ldd	r31, Y+8	; 0x08
     b14:	e0 0f       	add	r30, r16
     b16:	f1 1f       	adc	r31, r17
     b18:	10 82       	st	Z, r1
     b1a:	2e 96       	adiw	r28, 0x0e	; 14
     b1c:	e4 e0       	ldi	r30, 0x04	; 4
     b1e:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__epilogue_restores__+0x1c>

00000b22 <vfprintf>:
     b22:	ab e0       	ldi	r26, 0x0B	; 11
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e9       	ldi	r30, 0x97	; 151
     b28:	f5 e0       	ldi	r31, 0x05	; 5
     b2a:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__prologue_saves__>
     b2e:	6c 01       	movw	r12, r24
     b30:	7b 01       	movw	r14, r22
     b32:	8a 01       	movw	r16, r20
     b34:	fc 01       	movw	r30, r24
     b36:	17 82       	std	Z+7, r1	; 0x07
     b38:	16 82       	std	Z+6, r1	; 0x06
     b3a:	83 81       	ldd	r24, Z+3	; 0x03
     b3c:	81 ff       	sbrs	r24, 1
     b3e:	cc c1       	rjmp	.+920    	; 0xed8 <vfprintf+0x3b6>
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	3c 01       	movw	r6, r24
     b46:	f6 01       	movw	r30, r12
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	f7 01       	movw	r30, r14
     b4c:	93 fd       	sbrc	r25, 3
     b4e:	85 91       	lpm	r24, Z+
     b50:	93 ff       	sbrs	r25, 3
     b52:	81 91       	ld	r24, Z+
     b54:	7f 01       	movw	r14, r30
     b56:	88 23       	and	r24, r24
     b58:	09 f4       	brne	.+2      	; 0xb5c <vfprintf+0x3a>
     b5a:	ba c1       	rjmp	.+884    	; 0xed0 <vfprintf+0x3ae>
     b5c:	85 32       	cpi	r24, 0x25	; 37
     b5e:	39 f4       	brne	.+14     	; 0xb6e <vfprintf+0x4c>
     b60:	93 fd       	sbrc	r25, 3
     b62:	85 91       	lpm	r24, Z+
     b64:	93 ff       	sbrs	r25, 3
     b66:	81 91       	ld	r24, Z+
     b68:	7f 01       	movw	r14, r30
     b6a:	85 32       	cpi	r24, 0x25	; 37
     b6c:	29 f4       	brne	.+10     	; 0xb78 <vfprintf+0x56>
     b6e:	b6 01       	movw	r22, r12
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     b76:	e7 cf       	rjmp	.-50     	; 0xb46 <vfprintf+0x24>
     b78:	91 2c       	mov	r9, r1
     b7a:	21 2c       	mov	r2, r1
     b7c:	31 2c       	mov	r3, r1
     b7e:	ff e1       	ldi	r31, 0x1F	; 31
     b80:	f3 15       	cp	r31, r3
     b82:	d8 f0       	brcs	.+54     	; 0xbba <vfprintf+0x98>
     b84:	8b 32       	cpi	r24, 0x2B	; 43
     b86:	79 f0       	breq	.+30     	; 0xba6 <vfprintf+0x84>
     b88:	38 f4       	brcc	.+14     	; 0xb98 <vfprintf+0x76>
     b8a:	80 32       	cpi	r24, 0x20	; 32
     b8c:	79 f0       	breq	.+30     	; 0xbac <vfprintf+0x8a>
     b8e:	83 32       	cpi	r24, 0x23	; 35
     b90:	a1 f4       	brne	.+40     	; 0xbba <vfprintf+0x98>
     b92:	23 2d       	mov	r18, r3
     b94:	20 61       	ori	r18, 0x10	; 16
     b96:	1d c0       	rjmp	.+58     	; 0xbd2 <vfprintf+0xb0>
     b98:	8d 32       	cpi	r24, 0x2D	; 45
     b9a:	61 f0       	breq	.+24     	; 0xbb4 <vfprintf+0x92>
     b9c:	80 33       	cpi	r24, 0x30	; 48
     b9e:	69 f4       	brne	.+26     	; 0xbba <vfprintf+0x98>
     ba0:	23 2d       	mov	r18, r3
     ba2:	21 60       	ori	r18, 0x01	; 1
     ba4:	16 c0       	rjmp	.+44     	; 0xbd2 <vfprintf+0xb0>
     ba6:	83 2d       	mov	r24, r3
     ba8:	82 60       	ori	r24, 0x02	; 2
     baa:	38 2e       	mov	r3, r24
     bac:	e3 2d       	mov	r30, r3
     bae:	e4 60       	ori	r30, 0x04	; 4
     bb0:	3e 2e       	mov	r3, r30
     bb2:	2a c0       	rjmp	.+84     	; 0xc08 <vfprintf+0xe6>
     bb4:	f3 2d       	mov	r31, r3
     bb6:	f8 60       	ori	r31, 0x08	; 8
     bb8:	1d c0       	rjmp	.+58     	; 0xbf4 <vfprintf+0xd2>
     bba:	37 fc       	sbrc	r3, 7
     bbc:	2d c0       	rjmp	.+90     	; 0xc18 <vfprintf+0xf6>
     bbe:	20 ed       	ldi	r18, 0xD0	; 208
     bc0:	28 0f       	add	r18, r24
     bc2:	2a 30       	cpi	r18, 0x0A	; 10
     bc4:	40 f0       	brcs	.+16     	; 0xbd6 <vfprintf+0xb4>
     bc6:	8e 32       	cpi	r24, 0x2E	; 46
     bc8:	b9 f4       	brne	.+46     	; 0xbf8 <vfprintf+0xd6>
     bca:	36 fc       	sbrc	r3, 6
     bcc:	81 c1       	rjmp	.+770    	; 0xed0 <vfprintf+0x3ae>
     bce:	23 2d       	mov	r18, r3
     bd0:	20 64       	ori	r18, 0x40	; 64
     bd2:	32 2e       	mov	r3, r18
     bd4:	19 c0       	rjmp	.+50     	; 0xc08 <vfprintf+0xe6>
     bd6:	36 fe       	sbrs	r3, 6
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <vfprintf+0xc4>
     bda:	8a e0       	ldi	r24, 0x0A	; 10
     bdc:	98 9e       	mul	r9, r24
     bde:	20 0d       	add	r18, r0
     be0:	11 24       	eor	r1, r1
     be2:	92 2e       	mov	r9, r18
     be4:	11 c0       	rjmp	.+34     	; 0xc08 <vfprintf+0xe6>
     be6:	ea e0       	ldi	r30, 0x0A	; 10
     be8:	2e 9e       	mul	r2, r30
     bea:	20 0d       	add	r18, r0
     bec:	11 24       	eor	r1, r1
     bee:	22 2e       	mov	r2, r18
     bf0:	f3 2d       	mov	r31, r3
     bf2:	f0 62       	ori	r31, 0x20	; 32
     bf4:	3f 2e       	mov	r3, r31
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <vfprintf+0xe6>
     bf8:	8c 36       	cpi	r24, 0x6C	; 108
     bfa:	21 f4       	brne	.+8      	; 0xc04 <vfprintf+0xe2>
     bfc:	83 2d       	mov	r24, r3
     bfe:	80 68       	ori	r24, 0x80	; 128
     c00:	38 2e       	mov	r3, r24
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <vfprintf+0xe6>
     c04:	88 36       	cpi	r24, 0x68	; 104
     c06:	41 f4       	brne	.+16     	; 0xc18 <vfprintf+0xf6>
     c08:	f7 01       	movw	r30, r14
     c0a:	93 fd       	sbrc	r25, 3
     c0c:	85 91       	lpm	r24, Z+
     c0e:	93 ff       	sbrs	r25, 3
     c10:	81 91       	ld	r24, Z+
     c12:	7f 01       	movw	r14, r30
     c14:	81 11       	cpse	r24, r1
     c16:	b3 cf       	rjmp	.-154    	; 0xb7e <vfprintf+0x5c>
     c18:	98 2f       	mov	r25, r24
     c1a:	9f 7d       	andi	r25, 0xDF	; 223
     c1c:	95 54       	subi	r25, 0x45	; 69
     c1e:	93 30       	cpi	r25, 0x03	; 3
     c20:	28 f4       	brcc	.+10     	; 0xc2c <vfprintf+0x10a>
     c22:	0c 5f       	subi	r16, 0xFC	; 252
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	9f e3       	ldi	r25, 0x3F	; 63
     c28:	99 83       	std	Y+1, r25	; 0x01
     c2a:	0d c0       	rjmp	.+26     	; 0xc46 <vfprintf+0x124>
     c2c:	83 36       	cpi	r24, 0x63	; 99
     c2e:	31 f0       	breq	.+12     	; 0xc3c <vfprintf+0x11a>
     c30:	83 37       	cpi	r24, 0x73	; 115
     c32:	71 f0       	breq	.+28     	; 0xc50 <vfprintf+0x12e>
     c34:	83 35       	cpi	r24, 0x53	; 83
     c36:	09 f0       	breq	.+2      	; 0xc3a <vfprintf+0x118>
     c38:	59 c0       	rjmp	.+178    	; 0xcec <vfprintf+0x1ca>
     c3a:	21 c0       	rjmp	.+66     	; 0xc7e <vfprintf+0x15c>
     c3c:	f8 01       	movw	r30, r16
     c3e:	80 81       	ld	r24, Z
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	0e 5f       	subi	r16, 0xFE	; 254
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	88 24       	eor	r8, r8
     c48:	83 94       	inc	r8
     c4a:	91 2c       	mov	r9, r1
     c4c:	53 01       	movw	r10, r6
     c4e:	13 c0       	rjmp	.+38     	; 0xc76 <vfprintf+0x154>
     c50:	28 01       	movw	r4, r16
     c52:	f2 e0       	ldi	r31, 0x02	; 2
     c54:	4f 0e       	add	r4, r31
     c56:	51 1c       	adc	r5, r1
     c58:	f8 01       	movw	r30, r16
     c5a:	a0 80       	ld	r10, Z
     c5c:	b1 80       	ldd	r11, Z+1	; 0x01
     c5e:	36 fe       	sbrs	r3, 6
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <vfprintf+0x146>
     c62:	69 2d       	mov	r22, r9
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x14a>
     c68:	6f ef       	ldi	r22, 0xFF	; 255
     c6a:	7f ef       	ldi	r23, 0xFF	; 255
     c6c:	c5 01       	movw	r24, r10
     c6e:	0e 94 7d 07 	call	0xefa	; 0xefa <strnlen>
     c72:	4c 01       	movw	r8, r24
     c74:	82 01       	movw	r16, r4
     c76:	f3 2d       	mov	r31, r3
     c78:	ff 77       	andi	r31, 0x7F	; 127
     c7a:	3f 2e       	mov	r3, r31
     c7c:	16 c0       	rjmp	.+44     	; 0xcaa <vfprintf+0x188>
     c7e:	28 01       	movw	r4, r16
     c80:	22 e0       	ldi	r18, 0x02	; 2
     c82:	42 0e       	add	r4, r18
     c84:	51 1c       	adc	r5, r1
     c86:	f8 01       	movw	r30, r16
     c88:	a0 80       	ld	r10, Z
     c8a:	b1 80       	ldd	r11, Z+1	; 0x01
     c8c:	36 fe       	sbrs	r3, 6
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <vfprintf+0x174>
     c90:	69 2d       	mov	r22, r9
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <vfprintf+0x178>
     c96:	6f ef       	ldi	r22, 0xFF	; 255
     c98:	7f ef       	ldi	r23, 0xFF	; 255
     c9a:	c5 01       	movw	r24, r10
     c9c:	0e 94 72 07 	call	0xee4	; 0xee4 <strnlen_P>
     ca0:	4c 01       	movw	r8, r24
     ca2:	f3 2d       	mov	r31, r3
     ca4:	f0 68       	ori	r31, 0x80	; 128
     ca6:	3f 2e       	mov	r3, r31
     ca8:	82 01       	movw	r16, r4
     caa:	33 fc       	sbrc	r3, 3
     cac:	1b c0       	rjmp	.+54     	; 0xce4 <vfprintf+0x1c2>
     cae:	82 2d       	mov	r24, r2
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	88 16       	cp	r8, r24
     cb4:	99 06       	cpc	r9, r25
     cb6:	b0 f4       	brcc	.+44     	; 0xce4 <vfprintf+0x1c2>
     cb8:	b6 01       	movw	r22, r12
     cba:	80 e2       	ldi	r24, 0x20	; 32
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     cc2:	2a 94       	dec	r2
     cc4:	f4 cf       	rjmp	.-24     	; 0xcae <vfprintf+0x18c>
     cc6:	f5 01       	movw	r30, r10
     cc8:	37 fc       	sbrc	r3, 7
     cca:	85 91       	lpm	r24, Z+
     ccc:	37 fe       	sbrs	r3, 7
     cce:	81 91       	ld	r24, Z+
     cd0:	5f 01       	movw	r10, r30
     cd2:	b6 01       	movw	r22, r12
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     cda:	21 10       	cpse	r2, r1
     cdc:	2a 94       	dec	r2
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	82 1a       	sub	r8, r18
     ce2:	91 08       	sbc	r9, r1
     ce4:	81 14       	cp	r8, r1
     ce6:	91 04       	cpc	r9, r1
     ce8:	71 f7       	brne	.-36     	; 0xcc6 <vfprintf+0x1a4>
     cea:	e8 c0       	rjmp	.+464    	; 0xebc <vfprintf+0x39a>
     cec:	84 36       	cpi	r24, 0x64	; 100
     cee:	11 f0       	breq	.+4      	; 0xcf4 <vfprintf+0x1d2>
     cf0:	89 36       	cpi	r24, 0x69	; 105
     cf2:	41 f5       	brne	.+80     	; 0xd44 <vfprintf+0x222>
     cf4:	f8 01       	movw	r30, r16
     cf6:	37 fe       	sbrs	r3, 7
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <vfprintf+0x1e6>
     cfa:	60 81       	ld	r22, Z
     cfc:	71 81       	ldd	r23, Z+1	; 0x01
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	0c 5f       	subi	r16, 0xFC	; 252
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	08 c0       	rjmp	.+16     	; 0xd18 <vfprintf+0x1f6>
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	07 2e       	mov	r0, r23
     d0e:	00 0c       	add	r0, r0
     d10:	88 0b       	sbc	r24, r24
     d12:	99 0b       	sbc	r25, r25
     d14:	0e 5f       	subi	r16, 0xFE	; 254
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	f3 2d       	mov	r31, r3
     d1a:	ff 76       	andi	r31, 0x6F	; 111
     d1c:	3f 2e       	mov	r3, r31
     d1e:	97 ff       	sbrs	r25, 7
     d20:	09 c0       	rjmp	.+18     	; 0xd34 <vfprintf+0x212>
     d22:	90 95       	com	r25
     d24:	80 95       	com	r24
     d26:	70 95       	com	r23
     d28:	61 95       	neg	r22
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	8f 4f       	sbci	r24, 0xFF	; 255
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	f0 68       	ori	r31, 0x80	; 128
     d32:	3f 2e       	mov	r3, r31
     d34:	2a e0       	ldi	r18, 0x0A	; 10
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	a3 01       	movw	r20, r6
     d3a:	0e 94 c4 07 	call	0xf88	; 0xf88 <__ultoa_invert>
     d3e:	88 2e       	mov	r8, r24
     d40:	86 18       	sub	r8, r6
     d42:	45 c0       	rjmp	.+138    	; 0xdce <vfprintf+0x2ac>
     d44:	85 37       	cpi	r24, 0x75	; 117
     d46:	31 f4       	brne	.+12     	; 0xd54 <vfprintf+0x232>
     d48:	23 2d       	mov	r18, r3
     d4a:	2f 7e       	andi	r18, 0xEF	; 239
     d4c:	b2 2e       	mov	r11, r18
     d4e:	2a e0       	ldi	r18, 0x0A	; 10
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	25 c0       	rjmp	.+74     	; 0xd9e <vfprintf+0x27c>
     d54:	93 2d       	mov	r25, r3
     d56:	99 7f       	andi	r25, 0xF9	; 249
     d58:	b9 2e       	mov	r11, r25
     d5a:	8f 36       	cpi	r24, 0x6F	; 111
     d5c:	c1 f0       	breq	.+48     	; 0xd8e <vfprintf+0x26c>
     d5e:	18 f4       	brcc	.+6      	; 0xd66 <vfprintf+0x244>
     d60:	88 35       	cpi	r24, 0x58	; 88
     d62:	79 f0       	breq	.+30     	; 0xd82 <vfprintf+0x260>
     d64:	b5 c0       	rjmp	.+362    	; 0xed0 <vfprintf+0x3ae>
     d66:	80 37       	cpi	r24, 0x70	; 112
     d68:	19 f0       	breq	.+6      	; 0xd70 <vfprintf+0x24e>
     d6a:	88 37       	cpi	r24, 0x78	; 120
     d6c:	21 f0       	breq	.+8      	; 0xd76 <vfprintf+0x254>
     d6e:	b0 c0       	rjmp	.+352    	; 0xed0 <vfprintf+0x3ae>
     d70:	e9 2f       	mov	r30, r25
     d72:	e0 61       	ori	r30, 0x10	; 16
     d74:	be 2e       	mov	r11, r30
     d76:	b4 fe       	sbrs	r11, 4
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <vfprintf+0x272>
     d7a:	fb 2d       	mov	r31, r11
     d7c:	f4 60       	ori	r31, 0x04	; 4
     d7e:	bf 2e       	mov	r11, r31
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <vfprintf+0x272>
     d82:	34 fe       	sbrs	r3, 4
     d84:	0a c0       	rjmp	.+20     	; 0xd9a <vfprintf+0x278>
     d86:	29 2f       	mov	r18, r25
     d88:	26 60       	ori	r18, 0x06	; 6
     d8a:	b2 2e       	mov	r11, r18
     d8c:	06 c0       	rjmp	.+12     	; 0xd9a <vfprintf+0x278>
     d8e:	28 e0       	ldi	r18, 0x08	; 8
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <vfprintf+0x27c>
     d94:	20 e1       	ldi	r18, 0x10	; 16
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x27c>
     d9a:	20 e1       	ldi	r18, 0x10	; 16
     d9c:	32 e0       	ldi	r19, 0x02	; 2
     d9e:	f8 01       	movw	r30, r16
     da0:	b7 fe       	sbrs	r11, 7
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <vfprintf+0x290>
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	93 81       	ldd	r25, Z+3	; 0x03
     dac:	0c 5f       	subi	r16, 0xFC	; 252
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <vfprintf+0x29c>
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 5f       	subi	r16, 0xFE	; 254
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	a3 01       	movw	r20, r6
     dc0:	0e 94 c4 07 	call	0xf88	; 0xf88 <__ultoa_invert>
     dc4:	88 2e       	mov	r8, r24
     dc6:	86 18       	sub	r8, r6
     dc8:	fb 2d       	mov	r31, r11
     dca:	ff 77       	andi	r31, 0x7F	; 127
     dcc:	3f 2e       	mov	r3, r31
     dce:	36 fe       	sbrs	r3, 6
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <vfprintf+0x2ca>
     dd2:	23 2d       	mov	r18, r3
     dd4:	2e 7f       	andi	r18, 0xFE	; 254
     dd6:	a2 2e       	mov	r10, r18
     dd8:	89 14       	cp	r8, r9
     dda:	58 f4       	brcc	.+22     	; 0xdf2 <vfprintf+0x2d0>
     ddc:	34 fe       	sbrs	r3, 4
     dde:	0b c0       	rjmp	.+22     	; 0xdf6 <vfprintf+0x2d4>
     de0:	32 fc       	sbrc	r3, 2
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <vfprintf+0x2d4>
     de4:	83 2d       	mov	r24, r3
     de6:	8e 7e       	andi	r24, 0xEE	; 238
     de8:	a8 2e       	mov	r10, r24
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <vfprintf+0x2d4>
     dec:	b8 2c       	mov	r11, r8
     dee:	a3 2c       	mov	r10, r3
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <vfprintf+0x2d6>
     df2:	b8 2c       	mov	r11, r8
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <vfprintf+0x2d6>
     df6:	b9 2c       	mov	r11, r9
     df8:	a4 fe       	sbrs	r10, 4
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <vfprintf+0x2f8>
     dfc:	fe 01       	movw	r30, r28
     dfe:	e8 0d       	add	r30, r8
     e00:	f1 1d       	adc	r31, r1
     e02:	80 81       	ld	r24, Z
     e04:	80 33       	cpi	r24, 0x30	; 48
     e06:	21 f4       	brne	.+8      	; 0xe10 <vfprintf+0x2ee>
     e08:	9a 2d       	mov	r25, r10
     e0a:	99 7e       	andi	r25, 0xE9	; 233
     e0c:	a9 2e       	mov	r10, r25
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <vfprintf+0x300>
     e10:	a2 fe       	sbrs	r10, 2
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x2fe>
     e14:	b3 94       	inc	r11
     e16:	b3 94       	inc	r11
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <vfprintf+0x300>
     e1a:	8a 2d       	mov	r24, r10
     e1c:	86 78       	andi	r24, 0x86	; 134
     e1e:	09 f0       	breq	.+2      	; 0xe22 <vfprintf+0x300>
     e20:	b3 94       	inc	r11
     e22:	a3 fc       	sbrc	r10, 3
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <vfprintf+0x326>
     e26:	a0 fe       	sbrs	r10, 0
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0x314>
     e2a:	b2 14       	cp	r11, r2
     e2c:	88 f4       	brcc	.+34     	; 0xe50 <vfprintf+0x32e>
     e2e:	28 0c       	add	r2, r8
     e30:	92 2c       	mov	r9, r2
     e32:	9b 18       	sub	r9, r11
     e34:	0e c0       	rjmp	.+28     	; 0xe52 <vfprintf+0x330>
     e36:	b2 14       	cp	r11, r2
     e38:	60 f4       	brcc	.+24     	; 0xe52 <vfprintf+0x330>
     e3a:	b6 01       	movw	r22, r12
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     e44:	b3 94       	inc	r11
     e46:	f7 cf       	rjmp	.-18     	; 0xe36 <vfprintf+0x314>
     e48:	b2 14       	cp	r11, r2
     e4a:	18 f4       	brcc	.+6      	; 0xe52 <vfprintf+0x330>
     e4c:	2b 18       	sub	r2, r11
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <vfprintf+0x332>
     e50:	98 2c       	mov	r9, r8
     e52:	21 2c       	mov	r2, r1
     e54:	a4 fe       	sbrs	r10, 4
     e56:	10 c0       	rjmp	.+32     	; 0xe78 <vfprintf+0x356>
     e58:	b6 01       	movw	r22, r12
     e5a:	80 e3       	ldi	r24, 0x30	; 48
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     e62:	a2 fe       	sbrs	r10, 2
     e64:	17 c0       	rjmp	.+46     	; 0xe94 <vfprintf+0x372>
     e66:	a1 fc       	sbrc	r10, 1
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <vfprintf+0x34e>
     e6a:	88 e7       	ldi	r24, 0x78	; 120
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0x352>
     e70:	88 e5       	ldi	r24, 0x58	; 88
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	b6 01       	movw	r22, r12
     e76:	0c c0       	rjmp	.+24     	; 0xe90 <vfprintf+0x36e>
     e78:	8a 2d       	mov	r24, r10
     e7a:	86 78       	andi	r24, 0x86	; 134
     e7c:	59 f0       	breq	.+22     	; 0xe94 <vfprintf+0x372>
     e7e:	a1 fe       	sbrs	r10, 1
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <vfprintf+0x364>
     e82:	8b e2       	ldi	r24, 0x2B	; 43
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <vfprintf+0x366>
     e86:	80 e2       	ldi	r24, 0x20	; 32
     e88:	a7 fc       	sbrc	r10, 7
     e8a:	8d e2       	ldi	r24, 0x2D	; 45
     e8c:	b6 01       	movw	r22, r12
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     e94:	89 14       	cp	r8, r9
     e96:	38 f4       	brcc	.+14     	; 0xea6 <vfprintf+0x384>
     e98:	b6 01       	movw	r22, r12
     e9a:	80 e3       	ldi	r24, 0x30	; 48
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     ea2:	9a 94       	dec	r9
     ea4:	f7 cf       	rjmp	.-18     	; 0xe94 <vfprintf+0x372>
     ea6:	8a 94       	dec	r8
     ea8:	f3 01       	movw	r30, r6
     eaa:	e8 0d       	add	r30, r8
     eac:	f1 1d       	adc	r31, r1
     eae:	80 81       	ld	r24, Z
     eb0:	b6 01       	movw	r22, r12
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     eb8:	81 10       	cpse	r8, r1
     eba:	f5 cf       	rjmp	.-22     	; 0xea6 <vfprintf+0x384>
     ebc:	22 20       	and	r2, r2
     ebe:	09 f4       	brne	.+2      	; 0xec2 <vfprintf+0x3a0>
     ec0:	42 ce       	rjmp	.-892    	; 0xb46 <vfprintf+0x24>
     ec2:	b6 01       	movw	r22, r12
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 88 07 	call	0xf10	; 0xf10 <fputc>
     ecc:	2a 94       	dec	r2
     ece:	f6 cf       	rjmp	.-20     	; 0xebc <vfprintf+0x39a>
     ed0:	f6 01       	movw	r30, r12
     ed2:	86 81       	ldd	r24, Z+6	; 0x06
     ed4:	97 81       	ldd	r25, Z+7	; 0x07
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x3ba>
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	9f ef       	ldi	r25, 0xFF	; 255
     edc:	2b 96       	adiw	r28, 0x0b	; 11
     ede:	e2 e1       	ldi	r30, 0x12	; 18
     ee0:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__epilogue_restores__>

00000ee4 <strnlen_P>:
     ee4:	fc 01       	movw	r30, r24
     ee6:	05 90       	lpm	r0, Z+
     ee8:	61 50       	subi	r22, 0x01	; 1
     eea:	70 40       	sbci	r23, 0x00	; 0
     eec:	01 10       	cpse	r0, r1
     eee:	d8 f7       	brcc	.-10     	; 0xee6 <strnlen_P+0x2>
     ef0:	80 95       	com	r24
     ef2:	90 95       	com	r25
     ef4:	8e 0f       	add	r24, r30
     ef6:	9f 1f       	adc	r25, r31
     ef8:	08 95       	ret

00000efa <strnlen>:
     efa:	fc 01       	movw	r30, r24
     efc:	61 50       	subi	r22, 0x01	; 1
     efe:	70 40       	sbci	r23, 0x00	; 0
     f00:	01 90       	ld	r0, Z+
     f02:	01 10       	cpse	r0, r1
     f04:	d8 f7       	brcc	.-10     	; 0xefc <strnlen+0x2>
     f06:	80 95       	com	r24
     f08:	90 95       	com	r25
     f0a:	8e 0f       	add	r24, r30
     f0c:	9f 1f       	adc	r25, r31
     f0e:	08 95       	ret

00000f10 <fputc>:
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	fb 01       	movw	r30, r22
     f1a:	23 81       	ldd	r18, Z+3	; 0x03
     f1c:	21 fd       	sbrc	r18, 1
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <fputc+0x16>
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	2c c0       	rjmp	.+88     	; 0xf7e <fputc+0x6e>
     f26:	22 ff       	sbrs	r18, 2
     f28:	16 c0       	rjmp	.+44     	; 0xf56 <fputc+0x46>
     f2a:	46 81       	ldd	r20, Z+6	; 0x06
     f2c:	57 81       	ldd	r21, Z+7	; 0x07
     f2e:	24 81       	ldd	r18, Z+4	; 0x04
     f30:	35 81       	ldd	r19, Z+5	; 0x05
     f32:	42 17       	cp	r20, r18
     f34:	53 07       	cpc	r21, r19
     f36:	44 f4       	brge	.+16     	; 0xf48 <fputc+0x38>
     f38:	a0 81       	ld	r26, Z
     f3a:	b1 81       	ldd	r27, Z+1	; 0x01
     f3c:	9d 01       	movw	r18, r26
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	31 83       	std	Z+1, r19	; 0x01
     f44:	20 83       	st	Z, r18
     f46:	8c 93       	st	X, r24
     f48:	26 81       	ldd	r18, Z+6	; 0x06
     f4a:	37 81       	ldd	r19, Z+7	; 0x07
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	37 83       	std	Z+7, r19	; 0x07
     f52:	26 83       	std	Z+6, r18	; 0x06
     f54:	14 c0       	rjmp	.+40     	; 0xf7e <fputc+0x6e>
     f56:	8b 01       	movw	r16, r22
     f58:	ec 01       	movw	r28, r24
     f5a:	fb 01       	movw	r30, r22
     f5c:	00 84       	ldd	r0, Z+8	; 0x08
     f5e:	f1 85       	ldd	r31, Z+9	; 0x09
     f60:	e0 2d       	mov	r30, r0
     f62:	09 95       	icall
     f64:	89 2b       	or	r24, r25
     f66:	e1 f6       	brne	.-72     	; 0xf20 <fputc+0x10>
     f68:	d8 01       	movw	r26, r16
     f6a:	16 96       	adiw	r26, 0x06	; 6
     f6c:	8d 91       	ld	r24, X+
     f6e:	9c 91       	ld	r25, X
     f70:	17 97       	sbiw	r26, 0x07	; 7
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	17 96       	adiw	r26, 0x07	; 7
     f76:	9c 93       	st	X, r25
     f78:	8e 93       	st	-X, r24
     f7a:	16 97       	sbiw	r26, 0x06	; 6
     f7c:	ce 01       	movw	r24, r28
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	08 95       	ret

00000f88 <__ultoa_invert>:
     f88:	fa 01       	movw	r30, r20
     f8a:	aa 27       	eor	r26, r26
     f8c:	28 30       	cpi	r18, 0x08	; 8
     f8e:	51 f1       	breq	.+84     	; 0xfe4 <__ultoa_invert+0x5c>
     f90:	20 31       	cpi	r18, 0x10	; 16
     f92:	81 f1       	breq	.+96     	; 0xff4 <__ultoa_invert+0x6c>
     f94:	e8 94       	clt
     f96:	6f 93       	push	r22
     f98:	6e 7f       	andi	r22, 0xFE	; 254
     f9a:	6e 5f       	subi	r22, 0xFE	; 254
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	af 4f       	sbci	r26, 0xFF	; 255
     fa4:	b1 e0       	ldi	r27, 0x01	; 1
     fa6:	3e d0       	rcall	.+124    	; 0x1024 <__ultoa_invert+0x9c>
     fa8:	b4 e0       	ldi	r27, 0x04	; 4
     faa:	3c d0       	rcall	.+120    	; 0x1024 <__ultoa_invert+0x9c>
     fac:	67 0f       	add	r22, r23
     fae:	78 1f       	adc	r23, r24
     fb0:	89 1f       	adc	r24, r25
     fb2:	9a 1f       	adc	r25, r26
     fb4:	a1 1d       	adc	r26, r1
     fb6:	68 0f       	add	r22, r24
     fb8:	79 1f       	adc	r23, r25
     fba:	8a 1f       	adc	r24, r26
     fbc:	91 1d       	adc	r25, r1
     fbe:	a1 1d       	adc	r26, r1
     fc0:	6a 0f       	add	r22, r26
     fc2:	71 1d       	adc	r23, r1
     fc4:	81 1d       	adc	r24, r1
     fc6:	91 1d       	adc	r25, r1
     fc8:	a1 1d       	adc	r26, r1
     fca:	20 d0       	rcall	.+64     	; 0x100c <__ultoa_invert+0x84>
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <__ultoa_invert+0x48>
     fce:	68 94       	set
     fd0:	3f 91       	pop	r19
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	26 9f       	mul	r18, r22
     fd6:	11 24       	eor	r1, r1
     fd8:	30 19       	sub	r19, r0
     fda:	30 5d       	subi	r19, 0xD0	; 208
     fdc:	31 93       	st	Z+, r19
     fde:	de f6       	brtc	.-74     	; 0xf96 <__ultoa_invert+0xe>
     fe0:	cf 01       	movw	r24, r30
     fe2:	08 95       	ret
     fe4:	46 2f       	mov	r20, r22
     fe6:	47 70       	andi	r20, 0x07	; 7
     fe8:	40 5d       	subi	r20, 0xD0	; 208
     fea:	41 93       	st	Z+, r20
     fec:	b3 e0       	ldi	r27, 0x03	; 3
     fee:	0f d0       	rcall	.+30     	; 0x100e <__ultoa_invert+0x86>
     ff0:	c9 f7       	brne	.-14     	; 0xfe4 <__ultoa_invert+0x5c>
     ff2:	f6 cf       	rjmp	.-20     	; 0xfe0 <__ultoa_invert+0x58>
     ff4:	46 2f       	mov	r20, r22
     ff6:	4f 70       	andi	r20, 0x0F	; 15
     ff8:	40 5d       	subi	r20, 0xD0	; 208
     ffa:	4a 33       	cpi	r20, 0x3A	; 58
     ffc:	18 f0       	brcs	.+6      	; 0x1004 <__ultoa_invert+0x7c>
     ffe:	49 5d       	subi	r20, 0xD9	; 217
    1000:	31 fd       	sbrc	r19, 1
    1002:	40 52       	subi	r20, 0x20	; 32
    1004:	41 93       	st	Z+, r20
    1006:	02 d0       	rcall	.+4      	; 0x100c <__ultoa_invert+0x84>
    1008:	a9 f7       	brne	.-22     	; 0xff4 <__ultoa_invert+0x6c>
    100a:	ea cf       	rjmp	.-44     	; 0xfe0 <__ultoa_invert+0x58>
    100c:	b4 e0       	ldi	r27, 0x04	; 4
    100e:	a6 95       	lsr	r26
    1010:	97 95       	ror	r25
    1012:	87 95       	ror	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	ba 95       	dec	r27
    101a:	c9 f7       	brne	.-14     	; 0x100e <__ultoa_invert+0x86>
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	61 05       	cpc	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	08 95       	ret
    1024:	9b 01       	movw	r18, r22
    1026:	ac 01       	movw	r20, r24
    1028:	0a 2e       	mov	r0, r26
    102a:	06 94       	lsr	r0
    102c:	57 95       	ror	r21
    102e:	47 95       	ror	r20
    1030:	37 95       	ror	r19
    1032:	27 95       	ror	r18
    1034:	ba 95       	dec	r27
    1036:	c9 f7       	brne	.-14     	; 0x102a <__ultoa_invert+0xa2>
    1038:	62 0f       	add	r22, r18
    103a:	73 1f       	adc	r23, r19
    103c:	84 1f       	adc	r24, r20
    103e:	95 1f       	adc	r25, r21
    1040:	a0 1d       	adc	r26, r0
    1042:	08 95       	ret

00001044 <__prologue_saves__>:
    1044:	2f 92       	push	r2
    1046:	3f 92       	push	r3
    1048:	4f 92       	push	r4
    104a:	5f 92       	push	r5
    104c:	6f 92       	push	r6
    104e:	7f 92       	push	r7
    1050:	8f 92       	push	r8
    1052:	9f 92       	push	r9
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	ca 1b       	sub	r28, r26
    106e:	db 0b       	sbc	r29, r27
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	09 94       	ijmp

0000107c <__epilogue_restores__>:
    107c:	2a 88       	ldd	r2, Y+18	; 0x12
    107e:	39 88       	ldd	r3, Y+17	; 0x11
    1080:	48 88       	ldd	r4, Y+16	; 0x10
    1082:	5f 84       	ldd	r5, Y+15	; 0x0f
    1084:	6e 84       	ldd	r6, Y+14	; 0x0e
    1086:	7d 84       	ldd	r7, Y+13	; 0x0d
    1088:	8c 84       	ldd	r8, Y+12	; 0x0c
    108a:	9b 84       	ldd	r9, Y+11	; 0x0b
    108c:	aa 84       	ldd	r10, Y+10	; 0x0a
    108e:	b9 84       	ldd	r11, Y+9	; 0x09
    1090:	c8 84       	ldd	r12, Y+8	; 0x08
    1092:	df 80       	ldd	r13, Y+7	; 0x07
    1094:	ee 80       	ldd	r14, Y+6	; 0x06
    1096:	fd 80       	ldd	r15, Y+5	; 0x05
    1098:	0c 81       	ldd	r16, Y+4	; 0x04
    109a:	1b 81       	ldd	r17, Y+3	; 0x03
    109c:	aa 81       	ldd	r26, Y+2	; 0x02
    109e:	b9 81       	ldd	r27, Y+1	; 0x01
    10a0:	ce 0f       	add	r28, r30
    10a2:	d1 1d       	adc	r29, r1
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	ed 01       	movw	r28, r26
    10b0:	08 95       	ret

000010b2 <_exit>:
    10b2:	f8 94       	cli

000010b4 <__stop_program>:
    10b4:	ff cf       	rjmp	.-2      	; 0x10b4 <__stop_program>
